import asyncio
import os
import time
from pprint import pprint

from asgiref.sync import sync_to_async, async_to_sync
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty, MessageMediaPhoto
from telethon.tl.functions.messages import GetHistoryRequest
from .models import Post  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
from django.utils import timezone

api_id = 28632508
api_hash = '6d260b5e6e9a606f44a38fc43bbe8bbc'
phone = '+380999491488'

client = TelegramClient('session_name', api_id, api_hash)

async def start_client():
    await client.start(phone)
    print("Telegram client started")

# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–Ω, –∏ –º–æ–∂–Ω–æ –∂–¥–∞—Ç—å –≤—ã–∑–æ–≤–∞
loop = asyncio.get_event_loop()
loop.run_until_complete(start_client())
async def get_all_groups_dict():
    async with TelegramClient('session_name1', api_id, api_hash) as client:
        await client.start(phone)
        result = await client(GetDialogsRequest(
            offset_date=None,
            offset_id=0,
            offset_peer=InputPeerEmpty(),
            limit=200,
            hash=0
        ))
        groups = [chat for chat in result.chats if getattr(chat, 'megagroup', False)]
        return [(g.id, g.title) for g in groups]

@sync_to_async
def save_post(post):
    post.save()

async def collect_posts_by_chat_id(chat_id):
    async with TelegramClient('session_name1', api_id, api_hash) as client:
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        dialogs = await client(GetDialogsRequest(
            offset_date=None,
            offset_id=0,
            offset_peer=InputPeerEmpty(),
            limit=200,
            hash=0
        ))

        groups = dialogs.chats

        # –ò—â–µ–º –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ chat_id
        target_group = next((g for g in groups if g.id == chat_id), None)

        if not target_group:
            print("‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        print(f"\nüì• –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑: {target_group.title}")

        all_messages = []
        offset_id = 0
        limit = 100

        while True:
            history = await client(GetHistoryRequest(
                peer=target_group,
                offset_id=offset_id,
                limit=limit,
                max_id=0,
                min_id=0,
                add_offset=0,
                offset_date=None,
                hash=0
            ))

            if not history.messages:
                break

            all_messages.extend(history.messages)
            offset_id = history.messages[-1].id
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            await asyncio.sleep(1)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        for message in all_messages:
            if not hasattr(message, 'message'):
                continue

            text = message.message.replace("\n", " ").replace("\r", "") if message.message else None

            if isinstance(message.media, MessageMediaPhoto):
                photo_filename = f"photo_{message.id}.jpg"
                photo_path = await client.download_media(
                    message.media,
                    file=os.path.join(os.getcwd(), '..', 'results', 'img', photo_filename)
                )
                photo = photo_filename
            else:
                photo = "No photo"

            date_str = timezone.localtime(message.date)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
            post, created = await Post.objects.aget_or_create(
                sender_id=str(message.sender_id),
                chat_id=target_group.id,
                text=text,
                defaults={
                    'date': date_str,
                    'photo': photo,
                    'comment_count': 'Not Available'
                }
            )

            if created:
                print(f"‚úÖ –ü–æ—Å—Ç {message.id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            else:
                print(f"‚ö†Ô∏è –ü–æ—Å—Ç {message.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—â–µ–Ω.")

        print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_messages)}")

def get_groups_sync():
    # –í—ã–∑—ã–≤–∞–µ–º async —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    return async_to_sync(get_all_groups_dict)()

def create_posts_sync(chat_id):
    # –í—ã–∑—ã–≤–∞–µ–º async —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    return async_to_sync(collect_posts_by_chat_id)(chat_id)
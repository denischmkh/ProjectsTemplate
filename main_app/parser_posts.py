import asyncio
import os
import time
from datetime import datetime
from pprint import pprint

from asgiref.sync import sync_to_async, async_to_sync
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty, MessageMediaPhoto
from telethon.tl.functions.messages import GetHistoryRequest
from .models import Post  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
from django.utils import timezone
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.errors import FloodWaitError, UserAlreadyParticipantError
from telethon.tl.types import PeerChannel

api_id = 28632508
api_hash = '6d260b5e6e9a606f44a38fc43bbe8bbc'
phone = '+380999491488'

client = TelegramClient('session_name', api_id, api_hash)

async def start_client():
    await client.start(phone)
    print("Telegram client started")

# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–Ω, –∏ –º–æ–∂–Ω–æ –∂–¥–∞—Ç—å –≤—ã–∑–æ–≤–∞
loop = asyncio.get_event_loop()


async def join_group_and_get_info(group_link_or_username):
    async with TelegramClient('session_name0', api_id, api_hash) as client:
        await client.start(phone)

        try:
            # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –ø–æ username/link
            entity = await client.get_input_entity(group_link_or_username)
            await client(JoinChannelRequest(entity))
            print(f"‚úÖ –í—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É {group_link_or_username}")
        except UserAlreadyParticipantError:
            print("–£–∂–µ —Å–æ—Å—Ç–æ–∏–º –≤ –≥—Ä—É–ø–ø–µ")
        except FloodWaitError as e:
            print(f"–ñ–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ FloodWait")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏: {e}")
            # –ú–æ–∂–Ω–æ —Ä–µ—à–∞—Ç—å, –¥–∞–ª—å—à–µ –ª–∏ –ø—Ä–æ–±–æ–≤–∞—Ç—å

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
        chat = await client.get_entity(group_link_or_username)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        return chat.id, chat.title

@sync_to_async
def save_post(msg, chat_id, target_user_id):
    text = msg.message.replace("\n", " ").replace("\r", "") if msg.message else None

    photo = "No photo"
    if isinstance(msg.media, MessageMediaPhoto):
        photo = f"photo_{msg.id}.jpg"
        # —Ñ–∞–π–ª –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ `await client.download_media(...)`
    dt = datetime.fromisoformat(str(timezone.localtime(msg.date)))

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥
    formatted = dt.strftime("%d %B %Y %H:%M:%S")

    Post.objects.get_or_create(
        date=formatted,
        sender_id=target_user_id,
        chat_id=chat_id,
        text=text,
        photo=photo,
        comment_count="Not Available"
    )

async def collect_all_user_messages(chat_id, target_user_id, max_messages=1000):
    async with TelegramClient('session_name1', api_id, api_hash) as client:
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")

        async for msg in client.iter_messages(PeerChannel(chat_id), from_user=target_user_id, limit=max_messages):
            if not msg.message:
                continue

            print(f"üì© –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.id} ‚Äî {msg.message}")

            await save_post(msg, chat_id, target_user_id)

        print(f"‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

async def collect_all_messages_by_chat_id(chat_id):
    client = TelegramClient('session_name2', api_id, api_hash)

    async with client:
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram-–∫–∞–Ω–∞–ª—É {chat_id}...")

        count = 0
        async for msg in client.iter_messages(PeerChannel(chat_id), reverse=False, limit=4000):
            if not msg.message:
                continue

            sender_id = getattr(msg.sender_id, 'user_id', msg.sender_id)
            if sender_id is None:
                print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{msg.id} ‚Äî –Ω–µ—Ç sender_id")
                continue
            await save_post(msg, chat_id, sender_id)
            print(f"üì© #{msg.id} ‚Äî {msg.message[:50]}")
            count += 1

        print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}")


def join_and_get_info_sync(group_link_or_username):
    return async_to_sync(join_group_and_get_info)(group_link_or_username)

def create_posts_sync(chat_id, user_id):
    # –í—ã–∑—ã–≤–∞–µ–º async —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    return async_to_sync(collect_all_user_messages)(chat_id, user_id, 1000)

def create_posts_from_group_sync(chat_id):
    return async_to_sync(collect_all_messages_by_chat_id)(chat_id)